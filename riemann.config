; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:console true})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server  {:host host})
  (udp-server  {:host host})
  (ws-server   {:host host})
  (repl-server {:host host}))

; Expire old events from the index every 30 seconds.
(periodically-expire 30)

(coalesce (smap folds/maximum
  (with {:service "Max CPU" :host nil} prn)))

 (let [index (index)]
  ; Inbound events will be passed to these streams:
   (streams
     (default :ttl 60
 ;      ; Index all events immediately.
       index
 ;
 ;      ; For demo and testing purposes, just log received and expired events
       #(info "received" %)
      ; (expired #(info "expired" %))
       
    (where (service "memory/usage_bytes")

           ; The where stream ignores any event that doesn't match. Events that
           ; do match get passed on to its children. Let's log those error
           ; events:

           (fn [event] (info "ffhfhfhfh" event))

           ; We just created a new function with fn, taking one argument: event.
           ; That function just logs the event to the Riemann logfile.
    ) 
       )))
 ;    
; Riemann allows us to transform multiple streams of events (e.g. reported
; memory usage and memory limit across many hosts) into a stream of result
; events (memory percentage use for each host).

(defn with-memory-percentage [& children]
  "Returns a stream which collects Heapster memory observation events per host,
  and emits an event giving (usage/limit) for each observation. Events with nil
  metrics are suppressed."
  (where (service #"memory")
    (by [:host]
      (project [(service #"/usage_bytes")
                (service #"/limit_bytes")]
        (smap riemann.folds/quotient
        (where* (fn [e] (not (nil? (:metric e))))
        (smap   (fn [e] (assoc e :service "memory-usage-percent")))
               #(call-rescue % children)))))))

; We can split streams according to threshold values, assign a state to each
; category, and then reconverge all results to pass to child streams.

(defn instantaneous-state [warn crit & children]
  "Returns a stream which marks events as:
      state critical when metric >= crit
      state warning when metric >= warn
      state ok otherwise"
  (let [state (fn [new-state] (fn [e] (assoc e :state new-state)))]
  (pipe -
    (splitp < metric
      crit (state "critical" -)
      warn (state "warning" -)
           (state "ok" -))
      #(call-rescue % children))))

; Riemann includes adapters for many third-party services; here's an example of
; how to use PagerDuty.

(require 'riemann.pagerduty)
(defn alert-pagerduty
  "Returns a stream which watches for a given service+host to transition to
  either critical or ok; on transition to critical, triggers a PagerDuty
  incident, and on transition to ok, resolves any associated incidents."
    [service-key]
    (let [pd (pagerduty service-key)]
          (changed-state {:init "ok"}
                  (where (state "ok")
                                 #(info "Resolving incident in PagerDuty" %)
                                 (:resolve pd))
                  (where (state "critical")
                                 #(info "Triggering incident in PagerDuty" %)
                                 (:trigger pd)))))
                               
                               
(streams
  (let [pagerduty-key "pagerduty-service-uuid"]

    ; filter for Heapster events
    (tagged "service=heapster"

      ; Index incoming events immediately
      (index)

      ; Send all incoming events on to Graphite
      ; (graphite {:host "graphite"})
      ; Calculate memory percentage use, index those new events, alert if
      ; the value is over threshold, and forward the result to Graphite
      (with-memory-percentage
        (index)
        (instantaneous-state 0.75 0.9
          (alert-pagerduty pagerduty-key)
          (graphite {:host "graphite"}))
        ))))
